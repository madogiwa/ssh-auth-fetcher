#!/bin/sh
##
## Authorized_keys fetcher for SSH AuthorizedKeysCommand
##

## When command fails, the shell exit immediately.
set -e

##
## environments
##
: ${SSH_AUTH_FETCHER_CONFIG_FILE:="/usr/local/etc/ssh-auth-fetcher.conf"}
: ${SSH_AUTH_FETCHER_TIMEOUT:=15}
: ${SSH_AUTH_FETCHER_RETRY:=1}
: ${SSH_AUTH_FETCHER_USE_CACHE:=0}
: ${SSH_AUTH_FETCHER_CACHE_DIR:="/var/cache/ssh-auth-fetcher"}
: ${SSH_AUTH_FETCHER_CACHE_TTL:=3600}
: ${SSH_AUTH_FETCHER_EXCLUDE_USERS:=""}
: ${SSH_AUTH_FETCHER_INCLUDE_USERS:=""}
: ${SSH_AUTH_FETCHER_HEADERS:=""}

##
## load config
##
username="${1}"
key_url=""
timeout="${SSH_AUTH_FETCHER_TIMEOUT}"
retry="${SSH_AUTH_FETCHER_RETRY}"
use_cache="${SSH_AUTH_FETCHER_USE_CACHE}"
cache_dir="${SSH_AUTH_FETCHER_CACHE_DIR}"
cache_ttl="${SSH_AUTH_FETCHER_CACHE_TTL}"
exclude_users="${SSH_AUTH_FETCHER_EXCLUDE_USERS}"
include_users="${SSH_AUTH_FETCHER_INCLUDE_USERS}"
headers="${SSH_AUTH_FETCHER_HEADERS}"

## username specified?
if [ -z "${username}" ]; then
    exit 51
fi

## valid username?
if echo "${username}" | grep -v -E '^[a-z_][a-z0-9_-]*$' > /dev/null; then
    exit 52
fi

## check whitelist & blacklist
if [ ! -z "${include_users}" ]; then
    match=0

    users=`echo ${include_users} | sed "s/\s//g" | sed "s/,/ /g"`
    for u in ${users}
    do
        if [ "${username}" = "${u}" ]; then
            match=1
        fi
    done

    if [ $match -ne 1 ]; then
        exit 55
    fi
elif [ ! -z "${exclude_users}" ]; then
    users=`echo ${exclude_users} | sed "s/\s//g" | sed "s/,/ /g"`
    for u in ${users};
    do
        if [ "${username}" = "${u}" ]; then
            exit 56
        fi
    done
fi

## config file exist?
if [ ! -e "${SSH_AUTH_FETCHER_CONFIG_FILE}" ]; then
    exit 53
fi

source "${SSH_AUTH_FETCHER_CONFIG_FILE}"

## key_url specified?
if [ -z "${key_url}" ]; then
    exit 54
fi


fetch_and_output () {
    if which wget > /dev/null; then
        options="-q --timeout=${timeout} --tries=${retry} --retry-connrefused --no-use-server-timestamps"
        [ -n "${headers}" ] && options="${options} `echo \"${headers};\" | sed -e \"s/\([^;]*\);/ --header=\\'\1\\'/g\"`"
        [ -n "${1}" ] && options="${options} -O '${1}'" || options="${options} -O -"
        cmd="wget ${options} '${key_url}'"
        eval "${cmd}"
    elif which curl > /dev/null; then
        options="-sL -f -m ${timeout} --retry ${retry} --retry-connrefused"
        if curl --help | grep 'retry-connrefused' > /dev/null; then
            options="${options} --retry-connrefused"
        fi
        [ -n "${headers}" ] && options="${options} `echo \"${headers};\" | sed -e \"s/\([^;]*\);/ --header '\1'/g\"`"
        [ -n "${1}" ] && options="${options} -o '${1}'"
        cmd="curl ${options} '${key_url}'"
        eval "${cmd}"
    else
        ## no fetcher program
        exit 61
    fi
}

##
## fetch & output remote key
##
if [ "$use_cache" -eq 0 ]; then
    fetch_and_output ""
    exit 0
fi

## cache directory exist?
if [ ! -d "${cache_dir}" ] || [ ! -w "${cache_dir}" ]; then
    exit 71
fi

cache_file="${cache_dir}/${username}.key"
modified="`stat -c '%Y' \"${cache_file}\" 2>&1`" &&:
if [ $? -ne 0 ]; then
    ## try BSD style
    modified="`stat -f '%m' \"${cache_file}\" 2>&1`" &&:
    if [ $? -ne 0 ]; then
        modified=0
    fi
fi

## cache lived?
now="`date +%s`"
if [ `expr "${modified}" + "${cache_ttl}"` -gt ${now} ]; then
    cat "${cache_file}"
    exit 0
fi

##
## fetch remote key
##

## create temporary file
temp_file="`mktemp -q \"${cache_file}.XXXXXXXX\"`" &&:
if [ $? -ne 0 ]; then
    ## fallback to direct output
    fetch_and_output ""
    exit 0
fi

## writable? (disk full check)
echo "" > "${temp_file}" &&:
if [ $? -ne 0 ]; then
    ## fallback to direct output
    fetch_and_output ""
    exit 0
fi

exit_handler() {
    /bin/rm -f "${temp_file}"
}

trap 'exit_handler' EXIT INT HUP TERM PIPE

fetch_and_output "${temp_file}"

/bin/mv "${temp_file}" "${cache_file}"
cat "${cache_file}"
exit 0
